import json
with open('../paths.json', 'r') as f:
    p_ = json.load(f)

PATH_TO_SCRIPTS = p_["scripts_path"]

TRAIN_SCRIPT = expand('{path_to_scripts}/train_model.py', path_to_scripts=PATH_TO_SCRIPTS)[0]
PREDICT_SCRIPT = expand('{path_to_scripts}/predict.py', path_to_scripts=PATH_TO_SCRIPTS)[0]
FIND_THRESHOLD = expand('{path_to_scripts}/calculate_dice_threshold.py', path_to_scripts=PATH_TO_SCRIPTS)[0]
BINARIZE = expand('{path_to_scripts}/binarize.py', path_to_scripts=PATH_TO_SCRIPTS)[0]
COMPUTE_DICES = expand('{path_to_scripts}/calculate_dice.py', path_to_scripts=PATH_TO_SCRIPTS)[0]
CONFIG_PATH = expand('../config.json', path_to_scripts=PATH_TO_SCRIPTS)[0]


ON_PREDICTED_DATASETS = ['val', 'test']
TRAIN_IDX = 'train_ids'
datasets_idx = expand("{dataset}_ids", dataset=ON_PREDICTED_DATASETS)
LOGS_TO_TNSBRD = './.train_logs'

predicted = expand("{dataset}", dataset=ON_PREDICTED_DATASETS)
SAVED_MODEL = 'model'
SAVED_THRESHOLDS = 'thresholds.npy'
SAVED_BIN_PREDS = 'binarized_predictions'
SAVED_DICES = 'dice_scores.npy'

rule all:
    input:
        predicted,
        {SAVED_MODEL},
        {SAVED_THRESHOLDS},
        {SAVED_BIN_PREDS},
        {SAVED_DICES}

rule train_model:
    input:
        val_dataset = datasets_idx[0]
    output:
        {SAVED_MODEL}
    shell:
        'python {TRAIN_SCRIPT} -cp {CONFIG_PATH} --train_ids_path {TRAIN_IDX} --val_ids_path {input.val_dataset} --log_path {LOGS_TO_TNSBRD} --save_model_path {SAVED_MODEL}'

rule predict_val:
    input:
        {SAVED_MODEL},
        val_dataset = datasets_idx[0],
    output:
        val_predicted = predicted[0]
    shell:
        'python {PREDICT_SCRIPT} -cp {CONFIG_PATH} --ids_path {input.val_dataset} --restore_model_path {SAVED_MODEL} --predictions_path {output.val_predicted}'

rule predict_test:
    input:
        {SAVED_MODEL},
        test_dataset = datasets_idx[1],
    output:
        test_predicted = predicted[1]
    shell:
        'python {PREDICT_SCRIPT} -cp {CONFIG_PATH} --ids_path {input.test_dataset} --restore_model_path {SAVED_MODEL} --predictions_path {output.test_predicted}'

rule find_thresholds:
    input:
        val_dataset = datasets_idx[0],
        val_preds = predicted[0]
    output:
        {SAVED_THRESHOLDS}
    shell:
        'python {FIND_THRESHOLD} -cp {CONFIG_PATH} --ids_path {input.val_dataset} --predictions_path {input.val_preds} --thresholds_path {SAVED_THRESHOLDS}'

rule binarize:
    input:
        {SAVED_THRESHOLDS},
        test_dataset = datasets_idx[1],
        test_preds = predicted[1],
    output:
        {SAVED_BIN_PREDS}
    shell:
        'python {BINARIZE} -cp {CONFIG_PATH}  --ids_path {input.test_dataset}  --thresholds_path {SAVED_THRESHOLDS} --binary_predictions_path {SAVED_BIN_PREDS} --predictions_path {predicted[1]}'

rule compute_dices:
    input:
        {SAVED_THRESHOLDS},
        {SAVED_BIN_PREDS},
        test_dataset = datasets_idx[1],
    output:
        {SAVED_DICES}
    shell:
        'python {COMPUTE_DICES} -cp {CONFIG_PATH} --ids_path {input.test_dataset} --thresholds_path {SAVED_THRESHOLDS} --predictions_path {SAVED_BIN_PREDS} --metrics_path {SAVED_DICES}'
